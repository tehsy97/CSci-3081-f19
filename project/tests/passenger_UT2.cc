// /**
//  *
//  * @Copyright 2019 3081 Staff, All rights reserved.
//  *
//  * STUDENTS:  DO NOT EDIT THIS FILE.  INSTEAD, MODIFY YOUR OWN PROJECT
//  * CODE TO FIT THE SPECIFICATION GIVEN BY THE TESTS IN THIS FILE.
//  *
//  * If you DO modify it, we overwrite it with a fresh version from our repo
//  * when grading, so you can't use it to fudge the tests anyway.
//  *
//  * This file is used by the CS3081W auto-grading system.
//  *
//  * Please note, the assessment tests for grading, will use the same include
//  * files, class names, and function names for accessing students' code that you
//  * find in this file.  So students, if you write your code so that it passes
//  * these feedback tests, you can be assured that the auto-grader will at least
//  * be able to properly link with your code.
//  */

// /*******************************************************************************
//  * Includes
//  ******************************************************************************/
// #include <gtest/gtest.h>
// #include <fstream>
// #include "../src/passenger.h"


// /******************************************************
// * TEST FEATURE SetUp
// *******************************************************/

// class PassengerTests : public ::testing::Test {
//  protected:
//     Passenger* passenger;

//     virtual void SetUp() {
//         passenger = new Passenger();
//     }

//     virtual void TearDown() {
//         delete passenger;
//     }
// };

// class PassengerTest2 : public ::testing::Test {
//  protected:
//     Passenger* passenger;
//     virtual void SetUp() {
//         passenger = new Passenger(33, "Zoe");
//     }

//     virtual void TearDown() {
//         delete passenger;
//     }
// };


// /*******************************************************************************
//  * Test Cases
//  ******************************************************************************/

// TEST_F(PassengerTests, GetOnBusandIsonBusTest) {
//     EXPECT_EQ(passenger->IsOnBus(), false);
//     passenger->GetOnBus();
//     EXPECT_EQ(passenger->IsOnBus(), true);
// }

// TEST_F(PassengerTest2, TotalWaitTest) {
//     int time = 0;

//     while (time < 60) {
//         if (time == 2) {
//             EXPECT_EQ(passenger->IsOnBus(), false);
//             passenger->GetOnBus();
//             EXPECT_EQ(passenger->IsOnBus(), true);
//         }

//         if (passenger->GetDestination()!= time) {
//             passenger->Update();
//         } else {
//             EXPECT_EQ(passenger->GetTotalWait(), 34);
//         }
//         time++;
//     }
// }


// TEST_F(PassengerTest2, UpdateTest) {
//     int time = 0;

//     while (time < 60) {
//         if (time == 2) {
//             passenger->GetOnBus();
//         }
//         if (passenger->GetDestination() != time) {
//             int old = passenger->GetTotalWait();
//             passenger->Update();
//             EXPECT_EQ(passenger->GetTotalWait()-old, 1);
//         } else {
//             EXPECT_EQ(passenger->GetTotalWait(), 34);
//         }
//         time++;
//     }
// }

// TEST_F(PassengerTest2, ReportTest) {
//     std::ofstream test_in;
//     std::ifstream correct_out, test_out;
//     std::string output, expected_output;

//     int time = 0;

//     while (time < 60) {
//         if (time == 2) {
//             EXPECT_EQ(passenger->IsOnBus(), false);
//             passenger->GetOnBus();
//             EXPECT_EQ(passenger->IsOnBus(), true);
//         }

//         if (passenger->GetDestination() != time) {
//             passenger->Update();
//         } else {
//             EXPECT_EQ(passenger->GetTotalWait(), 34);

//             test_in.open("gtest_out.txt");
//             passenger->Report(test_in);
//             test_in.close();

//             test_out.open("gtest_out.txt");
//             correct_out.open("correct_out.txt");
//             while (!test_out.eof() && !correct_out.eof()) {
//                 test_out >> output;
//                 correct_out >> expected_output;
//                 EXPECT_EQ(output, expected_output);
//             }
//         test_out.close();
//         correct_out.close();
//         }
//         time++;
//     }
// }
